package cafe.logic;

import java.util.ArrayList;
import java.util.List;

/**
 * Representation of a cafe
 * @author David Fuchs
 */
public class Cafe {

    private final int id;
    private String name;
    private String country;
    private String city;
    private String street;
    private List<Rating> ratings = new ArrayList<>();
    private List<Coffee> coffees = new ArrayList<>();
    private List<SpecialOffer> specialOffers = new ArrayList<>();
    private List<Post> posts = new ArrayList<>();
    private boolean active;
    private Admin admin;

    /**
     * Creates a new cafe from information in the database. ID is automatically 
     * generated by the database.
     * 
     * @param id
     * @param name
     * @param country
     * @param city
     * @param street
     * @param active
     * @param admin 
     */
    public Cafe(int id,String name,String country,String city,String street,
                boolean active,Admin admin){
        this.id = id;
        this.name = name;
        this.country = country;
        this.city = city;
        this.street = street;
        this.active = active;
        this.admin = admin;
    }

    /**
     * Add coffee to cafe.
     * @param coffee 
     */
    public void addCoffee(Coffee coffee) {
        getCoffees().add(coffee);
    }

    /**
     * Modify kind of coffee offered by cafe.
     * @param coffee 
     */
    public void editCoffee(Coffee coffee) {

    }

    /**
     * Add special offer to cafe.
     * @param offer 
     */
    public void addSpecialOffer(SpecialOffer offer) {
        getSpecialOffers().add(offer);
    }

    /**
     * Modify cafe's special offer.
     * @param offer 
     */
    public void editSpecialOffer(SpecialOffer offer) {

    }

    /**
     * Add post to cafe.
     * @param post 
     */
    public void addPost(Post post){
        getPosts().add(post);
    }

    /**
     * Add rating to cafe.
     * @param rating 
     */
    public void addRating(Rating rating){
        ratings.add(rating);
    }

    /**
     * Returns cafe's ID.
     * @return 
     */
    public int getID(){
        return id;
    }

    /**
     * Returns cafe's name.
     * @return 
     */
    public String getName(){
        return name;
    }

    /**
     * Indicate whether this cafe has been rated.
     * @return 
     */
    public boolean hasRatings(){
        return ratings.size() > 0;
    }

    /**
     * Get cafe's average rating.
     * @return 
     */
    public double getRating(){
        double sum = 0;
        for (Rating rating : ratings)
            sum += rating.getStars();
        return sum / ratings.size();
    }

    /**
     * Get collection of posts associated with a cafe.
     * @return the posts
     */
    public List<Post> getPosts() {
        return posts;
    }

    /**
     * Get country that a cafe is in.
     * @return the country
     */
    public String getCountry() {
        return country;
    }

    /**
     * Get city that a cafe is in.
     * @return the city
     */
    public String getCity() {
        return city;
    }

    /**
     * Get street that a cafe is in.
     * @return the street
     */
    public String getStreet() {
        return street;
    }

    /**
     * Get collection of kinds of coffee associated with a cafe.
     * @return the coffees
     */
    public List<Coffee> getCoffees() {
        return coffees;
    }

    /**
     * Get collection of special offers associated with a cafe.
     * @return the specialOffers
     */
    public List<SpecialOffer> getSpecialOffers() {
        return specialOffers;
    }

    /**
     * Indicates whether the cafe is active.
     * @return active
     */
    public boolean isActive() {
        return active;
    }

    /**
     * Changes state of cafe.
     */
    public void toggleActive() {
        active = !active;
    }
}
